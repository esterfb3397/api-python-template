name: CICD - Workflow
on:
  push:
    branches: [master,main]
  pull_request:
    branches: [master,main]
env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.7.1"
  PYLINT_THRESHOLD: 0
  PROJECT_FOLDER: app
  DOCKER_IMAGE_NAME: ${{ github.event.repository.name }}
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  KUBERNETES_NAMESPACE: api
  KUBERNETES_DEPLOYMENT: ${{ github.event.repository.name }}
jobs:
  install-test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python versions
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.3.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install Python dependencies
        run: poetry install 
      - name: Code quality
        run: poetry run pylint --fail-under=${{ env.PYLINT_THRESHOLD }} **/*.py
      - name: Test & Generate Coverage Report
        run: |
          poetry run coverage run --source=${{ env.PROJECT_FOLDER }}/ -m pytest --junitxml=pytest.xml
          poetry run coverage xml  
  publish-in-pypi:
    runs-on: ubuntu-latest
    needs: [install-test-coverage]
    if: contains(github.event.head_commit.message, 'cd run')
    steps:
      - name: Hello World
        run: echo "Hello World"         
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [install-test-coverage]
    if: contains(github.event.head_commit.message, 'cd run')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 
      - name: Cache Docker layers
        uses: actions/cache@v3  
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile 
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest, ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          build-args: |
           POETRY_VERSION=${{ env.POETRY_VERSION }}
           PYTHON_VERSION=${{ env.PYTHON_VERSION }}
  deploy-in-do-dev-kubernetes:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker-image]
    if: "${{contains(github.event.head_commit.message, 'cd run') && contains(github.event.head_commit.message, 'DO') && contains(github.event.head_commit.message, 'DEV')}}"
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Get the DO kubernetes cluster
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}
      - name: Deploy to DO Kubernetes
        run: kubectl set image deployment/${{ env.KUBERNETES_DEPLOYMENT }} ${{ env.KUBERNETES_DEPLOYMENT }}=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} -n ${{ env.KUBERNETES_NAMESPACE }}
      - name: Verify deployment
        run: kubectl rollout status deployment/${{ env.KUBERNETES_DEPLOYMENT }} -n ${{ env.KUBERNETES_NAMESPACE }}